from fastapi import FastAPI
from pydantic import BaseModel
import openai
import os
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# Cho ph√©p g·ªçi API t·ª´ web
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ƒê·ªãnh nghƒ©a body nh·∫≠n c√¢u h·ªèi
class QuestionRequest(BaseModel):
    question: str

@app.get("/")
def read_root():
    return {"message": "Hello, this is your Dental AI Chatbot üöÄ (powered by OpenAI)"}

@app.post("/ask")
async def ask_question(body: QuestionRequest):
    question = body.question

    if not OPENAI_API_KEY:
        return {"error": "API Key kh√¥ng t·ªìn t·∫°i tr√™n server"}

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": (
                    "B·∫°n l√† b√°c sƒ© c·∫•y gh√©p Implant v·ªõi 20 nƒÉm kinh nghi·ªám, tr·∫£ l·ªùi ch√≠nh x√°c, d·ªÖ hi·ªÉu c√°c c√¢u h·ªèi v·ªÅ quy tr√¨nh, chi ph√≠, th·ªùi gian ƒëi·ªÅu tr·ªã, chƒÉm s√≥c sau c·∫•y gh√©p Implant."
                )},
                {"role": "user", "content": question}
            ]
        )

        answer = response['choices'][0]['message']['content']
        return {"answer": answer}

    except Exception as e:
        return {"error": str(e)}
